<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.Blog.Dao.UserDAO">
	 <!-- 查询所有用户 -->
     <select id="selectUsers"  resultType="User">
        select * from user ;
     </select>
     <!-- 查询用户是否已存在 -->
     <select id="isExist" parameterType="User" resultType="int">
     	select count(*) from user where username=#{username} or email=#{email}
     </select>
     <!-- 通过usernmae获取实体对象及好友列表（id，name） -->
     <select id="selectUser" resultMap="UserReSultMap" >
     <![CDATA[
     	select u.*,u2.fid,u2.fname from user as u 
		left join(
		select user2.id fid,user2.username fname from user as user2 join 
		(select friend.userid userid,friend.friendid friendid from user join friendship as friend on (friend.userid=user.id or friend.friendid=user.id)  where user.id=((select id FROM user where username=#{username}))) as friend
		on ((user2.id=friend.userid or user2.id=friend.friendid) and user2.id<>((select id FROM user where username=#{username})  ) ) ) as u2 on (1=1) where u.username=#{username};
	 ]]>
     </select>
     	
     <select id="selectUserById" resultMap="UserReSultMap">
     <![CDATA[
     	select u.*,u2.fid,u2.fname from user as u 
		left join(
		select user2.id fid,user2.username fname from user as user2 join 
		(select friend.userid userid,friend.friendid friendid from user join friendship as friend 
		on (friend.userid=user.id or friend.friendid=user.id)  where user.id=#{id}) as friend
		on ((user2.id=friend.userid or user2.id=friend.friendid) and user2.id<>#{id} ) ) as u2 on (1=1) 
		where u.id=#{id};
	]]>
     </select>
     <!-- 为查询出来的数据映射到实体类 -->
     <resultMap type="User" id="UserReSultMap">
     	<id column="id" property="id"/>
     	<result column="username" property="username"/>
     	<result column="password" property="password"/>
     	<result column="email" property="email"/>
     	<result column="valid" property="valid"/>
     	<result column="mood"  property="mood"/>
     	<result column="ActivationCode" property="activationCode"/>
     	<collection property="friends" ofType="User" >
     		<id column="fid" property="id"/>
     		<result column="fname" property="username"/>
     	</collection>
     </resultMap>
     <!-- 保存对象，并同步 -->
     <insert id="saveUser" parameterType="User"  useGeneratedKeys="true" keyProperty="id">
     	insert into user value(null,#{username},#{password},#{email},0,null,#{activationCode});
     </insert>
     <!-- 激活或者封禁用户 -->
     <update id="updateUserValid">
     	update user set valid=#{valid ,jdbcType=INTEGER ,javaType=Boolean} where id=#{id}
     </update>
     <update id="updateMood">
     	update user set mood=#{mood} where id=#{id}
     </update>
     <!-- 可动态更新对象有值的字段，对象没值的字段不会更新,激活封禁不在此更新 -->
     <update id="updateUser">
     	update user  
     	<trim prefix="set"   suffixOverrides=",">
     		<if test="username!=null">username=#{username},</if>
     		<if test="password!=null">password=#{password},</if>
     		<if test="email!=null">email=#{email},</if>
     		<if test="mood!=null">mood=#{mood},</if>
     		<if test="activationCode!=null">activationCode=#{activationCode},</if>
     	</trim>
     		where id=#{id}
     </update>
</mapper>
<!-- select u.id,u.username,u2.fid,u2.fname from user as u 
left join(
select user2.id fid,user2.username fname from user as user2 join 
(select friend.userid userid,friend.friendid friendid from user join friendship as friend on (friend.userid=user.id or friend.friendid=user.id)  where user.id=1) as friend
on ((user2.id=friend.userid or user2.id=friend.friendid) and user2.id<>1 ) ) as u2 on (1=1) where u.username='陈晓航';
原来的sql语句有误，现在这个sql经测试过已无问题，可以根据取出id为1的记录。。
但是不全，还有id=1也要设置为别的值，如果不考虑繁琐，效率，可以再嵌套一个sql语句 -->